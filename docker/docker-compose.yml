version: '3.8'

services:
  gemini-consensus:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: gemini-consensus
    restart: unless-stopped
    
    # Environment variables
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - CLUSTER_NAME=gemini-consensus
      
    # Port mapping
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
      
    # Volume mounts
    volumes:
      - consensus_data:/usr/src/app/data
      - consensus_logs:/usr/src/app/logs
      - consensus_config:/usr/src/app/config:ro
      
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
          
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      
    # Network configuration
    networks:
      - consensus_network
      
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for distributed consensus state (optional)
  redis:
    image: redis:7-alpine
    container_name: gemini-consensus-redis
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volume for persistence
    volumes:
      - redis_data:/data
      
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
          
    # Network configuration
    networks:
      - consensus_network
      
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: gemini-consensus-prometheus
    restart: unless-stopped
    
    # Prometheus configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      
    ports:
      - "9091:9090"
      
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      
    networks:
      - consensus_network

# Named volumes for data persistence
volumes:
  consensus_data:
    driver: local
  consensus_logs:
    driver: local
  consensus_config:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

# Network configuration
networks:
  consensus_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16