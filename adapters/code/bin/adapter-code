#!/usr/bin/env node
/**
 * Code Adapter CLI Dispatcher
 * Routes commands to appropriate verification modules
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { promises as fs } from 'fs';

// Import adapters
import { runDiff } from '../src/diff.mjs';
import { runLint } from '../src/lint.mjs';
import { runTests } from '../src/tests.mjs';
import { runCoverage } from '../src/coverage.mjs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function main() {
    const args = process.argv.slice(2);

    if (args.length === 0) {
        showHelp();
        process.exit(0);
    }

    const command = args[0];
    const options = parseArguments(args.slice(1));

    // Ensure task directory exists
    if (options.taskDir) {
        await fs.mkdir(options.taskDir, { recursive: true });
    }

    // Load commitment and claim if provided
    if (options.commitmentPath) {
        try {
            options.commitment = JSON.parse(await fs.readFile(options.commitmentPath, 'utf8'));
        } catch (error) {
            console.error(`Error loading commitment: ${error.message}`);
        }
    }

    if (options.claimPath) {
        try {
            options.claim = JSON.parse(await fs.readFile(options.claimPath, 'utf8'));
        } catch (error) {
            console.error(`Error loading claim: ${error.message}`);
        }
    }

    if (options.profilePath) {
        try {
            options.profile = JSON.parse(await fs.readFile(options.profilePath, 'utf8'));
        } catch (error) {
            console.error(`Error loading profile: ${error.message}`);
        }
    }

    // Execute command
    try {
        switch (command) {
            case 'code:diff':
                await runDiff(options);
                console.log(`✓ Diff analysis complete: ${options.taskDir}/diff.json`);
                break;

            case 'code:lint':
                await runLint(options);
                console.log(`✓ Lint check complete: ${options.taskDir}/lint.json`);
                break;

            case 'code:tests':
                await runTests(options);
                console.log(`✓ Test execution complete: ${options.taskDir}/tests.json`);
                break;

            case 'code:coverage':
                await runCoverage(options);
                console.log(`✓ Coverage analysis complete: ${options.taskDir}/coverage.json`);
                break;

            case 'code:all':
                // Run all adapters
                console.log('Running all code verification adapters...');

                await runDiff(options);
                console.log('  ✓ Diff analysis complete');

                await runLint(options);
                console.log('  ✓ Lint check complete');

                await runTests(options);
                console.log('  ✓ Test execution complete');

                await runCoverage(options);
                console.log('  ✓ Coverage analysis complete');

                console.log(`\n✓ All code verification complete in ${options.taskDir}/`);
                break;

            default:
                console.error(`Unknown command: ${command}`);
                showHelp();
                process.exit(1);
        }
    } catch (error) {
        console.error(`Error executing ${command}:`, error.message);
        process.exit(1);
    }
}

function parseArguments(args) {
    const options = {
        taskDir: '.artifacts/current',
        commitmentPath: null,
        claimPath: null,
        profilePath: null,
        commitment: {},
        claim: {},
        profile: {}
    };

    for (let i = 0; i < args.length; i++) {
        switch (args[i]) {
            case '--task-dir':
                if (args[i + 1]) {
                    options.taskDir = args[i + 1];
                    i++;
                }
                break;

            case '--commitment':
                if (args[i + 1]) {
                    options.commitmentPath = args[i + 1];
                    i++;
                }
                break;

            case '--claim':
                if (args[i + 1]) {
                    options.claimPath = args[i + 1];
                    i++;
                }
                break;

            case '--profile':
                if (args[i + 1]) {
                    options.profilePath = args[i + 1];
                    i++;
                }
                break;
        }
    }

    return options;
}

function showHelp() {
    console.log(`
Code Adapter CLI - Code verification for MCP Gemini Adjudicator

Usage: adapter-code <command> [options]

Commands:
  code:diff      Analyze code changes and modified files
  code:lint      Run linting and code quality checks
  code:tests     Execute test suite and report results
  code:coverage  Generate code coverage metrics
  code:all       Run all code verification adapters

Options:
  --task-dir <path>      Directory for artifacts (default: .artifacts/current)
  --commitment <file>    Path to commitment.json file
  --claim <file>         Path to claim.json file
  --profile <file>       Path to verification profiles file

Examples:
  adapter-code code:diff --task-dir .artifacts/T_code_1
  adapter-code code:lint --task-dir .artifacts/T_code_1 --profile config/profiles.json
  adapter-code code:all --task-dir .artifacts/T_code_1 --commitment commitment.json --claim claim.json

Output:
  Each command creates JSON files in the task directory:
  - diff.json, diff_names.json, diffs.patch
  - lint.json
  - tests.json
  - coverage.json
`);
}

// Run main function
main().catch(error => {
    console.error('Fatal error:', error);
    process.exit(1);
});