name: Verify Claims

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'

jobs:
  verify-claims:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate diffs

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci || npm install
          pip install -r requirements.txt || true

      - name: Create task ID
        id: task
        run: |
          TASK_ID="T_$(date +%s)_${GITHUB_SHA:0:8}"
          echo "task_id=${TASK_ID}" >> $GITHUB_OUTPUT
          echo "Task ID: ${TASK_ID}"

      - name: Determine task type
        id: type
        run: |
          # Analyze changes to determine task type
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git diff --name-only HEAD || echo "")

          if echo "$CHANGED_FILES" | grep -qE '\.(js|ts|jsx|tsx|py|go|java|rb)$'; then
            TASK_TYPE="code_update"
          elif echo "$CHANGED_FILES" | grep -qE '\.(md|txt|rst)$'; then
            TASK_TYPE="content"
          elif echo "$CHANGED_FILES" | grep -qE 'api/|openapi|swagger'; then
            TASK_TYPE="api_test"
          else
            TASK_TYPE="general"
          fi

          echo "task_type=${TASK_TYPE}" >> $GITHUB_OUTPUT
          echo "Task type: ${TASK_TYPE}"

      - name: Generate commitment
        id: commitment
        run: |
          mkdir -p .artifacts/${{ steps.task.outputs.task_id }}

          # Generate commitment based on PR or commit
          cat > .artifacts/${{ steps.task.outputs.task_id }}/commitment.json << EOF
          {
            "task_id": "${{ steps.task.outputs.task_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "type": "${{ steps.type.outputs.task_type }}",
            "source": "github_actions",
            "context": {
              "pr_number": "${{ github.event.pull_request.number }}",
              "pr_title": "${{ github.event.pull_request.title }}",
              "commit_sha": "${{ github.sha }}",
              "commit_message": "${{ github.event.head_commit.message }}",
              "actor": "${{ github.actor }}",
              "repository": "${{ github.repository }}"
            }
          }
          EOF

          echo "Commitment generated"
          cat .artifacts/${{ steps.task.outputs.task_id }}/commitment.json

      - name: Generate claim
        id: claim
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git diff --name-only HEAD || echo "")
          FILES_JSON=$(echo "$CHANGED_FILES" | jq -R . | jq -s .)

          # Generate claim following v1.1 schema
          cat > .artifacts/${{ steps.task.outputs.task_id }}/claim.json << EOF
          {
            "schema": "verify.claim/v1.1",
            "actor": "github_actions",
            "task_id": "${{ steps.task.outputs.task_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "claim": {
              "type": "${{ steps.type.outputs.task_type }}",
              "units_total": $(echo "$CHANGED_FILES" | wc -l),
              "units_list": $FILES_JSON,
              "scope": {
                "repo_root": "$(pwd)",
                "targets": ["."],
                "files": $FILES_JSON
              },
              "declared": {
                "intent": "Verify changes in PR #${{ github.event.pull_request.number }} or commit ${{ github.sha }}",
                "approach": "Automated verification via GitHub Actions",
                "completion_status": "complete"
              }
            }
          }
          EOF

          echo "Claim generated"
          cat .artifacts/${{ steps.task.outputs.task_id }}/claim.json

      - name: Validate claim
        id: validate
        run: |
          if [ -f "tools/validate-claim.mjs" ]; then
            node tools/validate-claim.mjs .artifacts/${{ steps.task.outputs.task_id }}/claim.json
          else
            echo "⚠️ Claim validator not found, skipping validation"
          fi

      - name: Run adapters
        id: adapters
        run: |
          TASK_DIR=".artifacts/${{ steps.task.outputs.task_id }}"
          TASK_TYPE="${{ steps.type.outputs.task_type }}"

          # Read adapter plan
          if [ -f "config/adapter-plan.json" ]; then
            # Get capabilities for this task type
            CAPABILITIES=$(node -e "
              const plan = require('./config/adapter-plan.json');
              const taskPlan = plan['$TASK_TYPE'] || plan['general'] || { order: [] };
              console.log(taskPlan.order.join(' '));
            ")

            echo "Running capabilities: $CAPABILITIES"

            # Run each capability
            for CAPABILITY in $CAPABILITIES; do
              echo "Running capability: $CAPABILITY"

              # Resolve adapter for capability
              ADAPTER_BIN=$(node tools/resolve-adapter.js "$CAPABILITY" 2>/dev/null || echo "")

              if [ -n "$ADAPTER_BIN" ] && [ -f "$ADAPTER_BIN" ]; then
                echo "Executing: $ADAPTER_BIN"
                $ADAPTER_BIN "$CAPABILITY" \
                  --task-dir "$TASK_DIR" \
                  --commitment "$TASK_DIR/commitment.json" \
                  --claim "$TASK_DIR/claim.json" \
                  --profile config/verification.profiles.json \
                  || echo "Adapter $CAPABILITY returned: $?"
              else
                echo "⚠️ No adapter found for capability: $CAPABILITY"
              fi
            done
          else
            echo "⚠️ No adapter plan found, running basic checks"

            # Fallback to basic checks
            if [ "$TASK_TYPE" = "code_update" ]; then
              # Run basic code checks
              npm run lint || true
              npm run test || true
            fi
          fi

      - name: Generate artifacts bundle
        id: bundle
        run: |
          TASK_DIR=".artifacts/${{ steps.task.outputs.task_id }}"

          # Create artifacts summary
          node -e "
            const fs = require('fs');
            const path = require('path');
            const crypto = require('crypto');

            function getFiles(dir, files = []) {
              const items = fs.readdirSync(dir);
              for (const item of items) {
                const fullPath = path.join(dir, item);
                if (fs.statSync(fullPath).isDirectory()) {
                  getFiles(fullPath, files);
                } else {
                  files.push(fullPath);
                }
              }
              return files;
            }

            const taskDir = '$TASK_DIR';
            const files = getFiles(taskDir);
            const artifacts = {};

            for (const file of files) {
              const relativePath = path.relative(taskDir, file);
              const content = fs.readFileSync(file);
              const hash = crypto.createHash('sha256').update(content).digest('hex');
              artifacts[relativePath] = {
                size: content.length,
                sha256: hash
              };
            }

            fs.writeFileSync(path.join(taskDir, 'artifacts.json'), JSON.stringify({
              task_id: '${{ steps.task.outputs.task_id }}',
              generated_at: new Date().toISOString(),
              artifacts: artifacts
            }, null, 2));
          "

          echo "Artifacts bundle generated"
          cat $TASK_DIR/artifacts.json

      - name: Enforce gate
        id: gate
        run: |
          TASK_DIR=".artifacts/${{ steps.task.outputs.task_id }}"

          # Run gate enforcement
          if [ -f "tools/enforce-gate.mjs" ]; then
            node tools/enforce-gate.mjs \
              --task-dir "$TASK_DIR" \
              --profile config/verification.profiles.json \
              --task-type "${{ steps.type.outputs.task_type }}"

            GATE_EXIT=$?
            echo "gate_status=$GATE_EXIT" >> $GITHUB_OUTPUT

            if [ $GATE_EXIT -eq 0 ]; then
              echo "✅ Gate PASSED"
            else
              echo "❌ Gate FAILED"
            fi
          else
            echo "⚠️ Gate enforcer not found, skipping"
            echo "gate_status=0" >> $GITHUB_OUTPUT
          fi

      - name: Run Gemini verification (if needed)
        id: gemini
        if: steps.gate.outputs.gate_status != '0' || github.event.inputs.debug_mode == 'true'
        run: |
          TASK_DIR=".artifacts/${{ steps.task.outputs.task_id }}"

          # Check if LLM verification is needed
          if [ -f "$TASK_DIR/verdict.json" ]; then
            echo "Fast path verdict found, skipping Gemini"
            cat $TASK_DIR/verdict.json
          elif [ -f "verifier/gemini.mjs" ]; then
            echo "Running Gemini verification..."
            node verifier/gemini.mjs \
              --task-dir "$TASK_DIR" \
              --profile config/verification.profiles.json \
              || echo "Gemini verification returned: $?"
          else
            echo "⚠️ Gemini verifier not found"
          fi

      - name: Convert to JUnit
        if: always()
        id: junit
        run: |
          TASK_DIR=".artifacts/${{ steps.task.outputs.task_id }}"

          if [ -f "tools/verdict-to-junit.mjs" ] && [ -f "$TASK_DIR/verdict.json" ]; then
            node tools/verdict-to-junit.mjs \
              --verdict "$TASK_DIR/verdict.json" \
              --output "$TASK_DIR/junit.xml"
            echo "JUnit report generated"
          else
            # Generate basic JUnit report
            cat > $TASK_DIR/junit.xml << EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <testsuites name="Verification" tests="1" failures="0" errors="0" time="0">
              <testsuite name="Claims" tests="1" failures="0" errors="0" time="0">
                <testcase name="Verification" classname="Claims.Verification" time="0">
                  <system-out>Task ID: ${{ steps.task.outputs.task_id }}</system-out>
                </testcase>
              </testsuite>
            </testsuites>
            EOF
          fi

      - name: Publish test results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Verification Results
          path: '.artifacts/${{ steps.task.outputs.task_id }}/junit.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: verification-artifacts-${{ steps.task.outputs.task_id }}
          path: .artifacts/${{ steps.task.outputs.task_id }}/
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const taskId = '${{ steps.task.outputs.task_id }}';
            const taskDir = `.artifacts/${taskId}`;

            let comment = `## 🔍 Verification Report\n\n`;
            comment += `**Task ID:** ${taskId}\n`;
            comment += `**Type:** ${{ steps.type.outputs.task_type }}\n\n`;

            // Read verdict if available
            try {
              const verdict = JSON.parse(fs.readFileSync(`${taskDir}/verdict.json`, 'utf8'));
              const status = verdict.status === 'pass' ? '✅ PASSED' : '❌ FAILED';
              comment += `### Verdict: ${status}\n\n`;

              if (verdict.reasons && verdict.reasons.length > 0) {
                comment += `**Reasons:**\n`;
                verdict.reasons.forEach(reason => {
                  comment += `- ${reason}\n`;
                });
                comment += '\n';
              }

              if (verdict.evidence) {
                comment += `<details>\n<summary>Evidence</summary>\n\n`;
                comment += '```json\n' + JSON.stringify(verdict.evidence, null, 2) + '\n```\n';
                comment += `</details>\n\n`;
              }
            } catch (e) {
              comment += `### Verdict: ⚠️ Pending\n\n`;
            }

            // Read artifacts summary
            try {
              const artifacts = JSON.parse(fs.readFileSync(`${taskDir}/artifacts.json`, 'utf8'));
              const fileCount = Object.keys(artifacts.artifacts).length;
              comment += `**Artifacts Generated:** ${fileCount} files\n\n`;
            } catch (e) {
              // No artifacts summary
            }

            comment += `---\n`;
            comment += `*Generated by MCP Gemini Adjudicator* | [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            // Post or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.body.includes('🔍 Verification Report') &&
              comment.user.type === 'Bot'
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Set job status
        if: always()
        run: |
          if [ "${{ steps.gate.outputs.gate_status }}" = "0" ]; then
            echo "✅ All verification checks passed"
            exit 0
          else
            echo "❌ Verification failed"
            exit 1
          fi